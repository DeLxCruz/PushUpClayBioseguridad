// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(BioSecurityContext))]
    partial class BioSecurityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Domain.Entities.Addresstype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("addresstype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StateId" }, "StateId");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ClientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PersonId" }, "PersonId");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contacttype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("contacttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ContractDate")
                        .HasColumnType("date");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClientId" }, "ClientId");

                    b.HasIndex(new[] { "ContractTypeId" }, "ContractTypeId");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeId");

                    b.HasIndex(new[] { "StateId" }, "StateId")
                        .HasDatabaseName("StateId1");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contracttype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("contracttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PersonId" }, "PersonId")
                        .HasDatabaseName("PersonId1");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PersonCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PersonId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PersonTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CityId" }, "CityId");

                    b.HasIndex(new[] { "PersonCategoryId" }, "PersonCategoryId");

                    b.HasIndex(new[] { "PersonId" }, "PersonId")
                        .IsUnique()
                        .HasDatabaseName("PersonId2");

                    b.HasIndex(new[] { "PersonTypeId" }, "PersonTypeId");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personaddress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressTypeId" }, "AddressTypeId");

                    b.HasIndex(new[] { "PersonId" }, "PersonId")
                        .HasDatabaseName("PersonId3");

                    b.ToTable("personaddress", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personcategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("personcategory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Personcontact", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContactTypeId" }, "ContactTypeId");

                    b.HasIndex(new[] { "PersonId" }, "PersonId")
                        .HasDatabaseName("PersonId4");

                    b.ToTable("personcontact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Persontype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("persontype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContractId" }, "ContractId");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeId")
                        .HasDatabaseName("EmployeeId1");

                    b.HasIndex(new[] { "ShiftId" }, "ShiftId");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("shifts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CountryId" }, "CountryId");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("city_ibfk_1");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Clients")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("client_ibfk_1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("contract_ibfk_1");

                    b.HasOne("Domain.Entities.Contracttype", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeId")
                        .HasConstraintName("contract_ibfk_4");

                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("contract_ibfk_2");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Contracts")
                        .HasForeignKey("StateId")
                        .HasConstraintName("contract_ibfk_3");

                    b.Navigation("Client");

                    b.Navigation("ContractType");

                    b.Navigation("Employee");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("employee_ibfk_1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .HasConstraintName("person_ibfk_3");

                    b.HasOne("Domain.Entities.Personcategory", "PersonCategory")
                        .WithMany("People")
                        .HasForeignKey("PersonCategoryId")
                        .HasConstraintName("person_ibfk_2");

                    b.HasOne("Domain.Entities.Persontype", "PersonType")
                        .WithMany("People")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("person_ibfk_1");

                    b.Navigation("City");

                    b.Navigation("PersonCategory");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("Domain.Entities.Personaddress", b =>
                {
                    b.HasOne("Domain.Entities.Addresstype", "AddressType")
                        .WithMany("Personaddresses")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("personaddress_ibfk_2");

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Personaddresses")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("personaddress_ibfk_1");

                    b.Navigation("AddressType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Personcontact", b =>
                {
                    b.HasOne("Domain.Entities.Contacttype", "ContactType")
                        .WithMany("Personcontacts")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("personcontact_ibfk_2");

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Personcontacts")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("personcontact_ibfk_1");

                    b.Navigation("ContactType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Schedules")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("schedule_ibfk_1");

                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("schedule_ibfk_3");

                    b.HasOne("Domain.Entities.Shift", "Shift")
                        .WithMany("Schedules")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("schedule_ibfk_2");

                    b.Navigation("Contract");

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("state_ibfk_1");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Addresstype", b =>
                {
                    b.Navigation("Personaddresses");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Contacttype", b =>
                {
                    b.Navigation("Personcontacts");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Entities.Contracttype", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Personaddresses");

                    b.Navigation("Personcontacts");
                });

            modelBuilder.Entity("Domain.Entities.Personcategory", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Persontype", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
